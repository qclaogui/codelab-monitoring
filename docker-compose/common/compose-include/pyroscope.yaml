services:
  # Grafana Pyroscope allows you to aggregate continuous profiling data with high availability, multi-
  # tenancy, and durable storage.
  #
  # https://github.com/grafana/pyroscope
  pyroscope:
    labels:
      metrics.grafana.com/scrape: false
      profiles.grafana.com/cpu.scrape: true
      profiles.grafana.com/memory.scrape: true
      profiles.grafana.com/goroutine.scrape: true
    depends_on: {minio: {condition: service_healthy}}
    image: ${PYROSCOPE_IMAGE:-docker.io/grafana/pyroscope:1.13.2}
    configs:
      - source: pyroscope_config_file
        target: /etc/pyroscope/config.yaml
    volumes:
      - ../config/pyroscope:/etc/pyroscope/configs
      - pyroscope_data:/data
      - pyroscope_compactor_data:/data-compactor
    command:
      - -config.file=/etc/pyroscope/config.yaml
      - -target=all
      - -config.expand-env=true
      # - -runtime-config.file=/etc/pyroscope/configs/overrides.yaml
    healthcheck:
      ## execute the `test` in a shell use the form `["CMD-SHELL", "command"]`
      # test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:4040/ready || exit 1" ]
      ## execute the `test` without a shell, use the form: `["CMD", "command", "arg1", "arg2"]`
      test: ["CMD", "profilecli", "ready"]
      interval: 2s
      timeout: 1s
      retries: 15
    # expose 34040 port so we can directly access pyroscope inside container
    ports:
      - "34040:4040"

volumes:
  pyroscope_data: {}
  pyroscope_compactor_data: {}
