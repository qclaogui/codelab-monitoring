# ============================================================================ #
#                  Microservices Mode - Metrics
# ============================================================================ #

# Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/memcached.yaml
  - path: ../../common/compose-include/grafana.yaml
  - path: ../../common/compose-include/alloy.yaml

# Configure a check that's run to determine whether or not containers for this service are "healthy".
# docs: https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck
x-healthcheck: &status-healthcheck
  interval: 5s
  timeout: 2s
  retries: 10

configs:
  alloy_config_file:
    file: ../../common/config/alloy/metrics.alloy
  mimir_config_file:
    file: ../../common/config/mimir/microservices-mode-metrics.yaml

services:
  gateway:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/alloy-modules/compose/README.md
    labels:
      - metrics.grafana.com/scrape=false
    depends_on: {distributor: {condition: service_started}, ruler: {condition: service_started}}
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:1.27-alpine}
    volumes:
      - ../../common/config/nginx/10-default-lgtmp.envsh:/docker-entrypoint.d/10-default-lgtmp.envsh
      - ../../common/config/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ../../common/config/mimir/gateway_mimir.conf:/etc/nginx/templates/gateway_mimir.conf.template
    environment:
      - MIMIR_DISTRIBUTOR_HOST=distributor
      - MIMIR_ALERT_MANAGER_HOST=alertmanager
      - MIMIR_RULER_HOST=ruler
      - MIMIR_QUERY_FRONTEND_HOST=query-frontend
      - MIMIR_COMPACTOR_HOST=compactor
    healthcheck:
      test: ["CMD", "/usr/bin/wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 3s
      timeout: 1s
      retries: 20
    ports:
      - "38080:8080"

  distributor:
    depends_on: {ingester: {condition: service_started}}
    image: &mimirImage ${MIMIR_IMAGE:-docker.io/grafana/mimir:2.16.1}
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -target=distributor
      - -config.expand-env=true
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  overrides-exporter:
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -target=overrides-exporter
      - -config.expand-env=true

  querier:
    depends_on: {query-scheduler: {condition: service_started}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -target=querier
      - -config.expand-env=true
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist

  query-frontend:
    depends_on: {query-scheduler: {condition: service_started}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -target=query-frontend
      - -config.expand-env=true

  query-scheduler:
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=query-scheduler
    deploy:
      replicas: 2

  ruler:
    depends_on: {minio: {condition: service_healthy}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=ruler
    networks:
      default:
        aliases:
          - mimir-memberlist

  alertmanager:
    depends_on: {minio: {condition: service_healthy}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=alertmanager
    networks:
      default:
        aliases:
          - mimir-memberlist

  compactor:
    depends_on: {minio: {condition: service_healthy}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=compactor
    networks:
      default:
        aliases:
          - mimir-memberlist

  ingester:
    depends_on: {minio: {condition: service_healthy}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=ingester
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - mimir-memberlist

  store-gateway:
    depends_on: {minio: {condition: service_healthy}}
    image: *mimirImage
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ../../common/config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -config.expand-env=true
      - -target=store-gateway
    networks:
      default:
        aliases:
          - mimir-memberlist

  mimirtool:
    labels:
      metrics.grafana.com/scrape: false
    image: ${MIMIRTOOL_IMAGE:-docker.io/grafana/mimirtool:2.16.1}
    volumes:
      - ../../../monitoring-mixins/crontab:/etc/crontabs/root
      - ../../../monitoring-mixins/alloy-mixin/deploy/alloy-mixin-alerts.yaml:/rules/alloy-mixin-alerts.yaml
      - ../../../monitoring-mixins/memcached-mixin/deploy/memcached-mixin-alerts.yaml:/rules/memcached-mixin-alerts.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/mimir-mixin-rules.yaml:/rules/mimir-mixin-rules.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/mimir-mixin-alerts.yaml:/rules/mimir-mixin-alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    entrypoint: crond -f
    restart: always
