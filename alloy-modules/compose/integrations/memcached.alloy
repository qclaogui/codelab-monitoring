/*
Module Components: component_memcached
*/

declare "component_memcached" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "memcached_address" {
		comment  = "address of the Memcached"
		optional = true
		default  = "memcached:11211"
	}

	argument "memcached_timeout" {
		comment  = "timeout of the Memcached"
		optional = true
		default  = "5s"
	}

	argument "job_label" {
		optional = true
		default  = "integrations/docker/memcached"
	}

	argument "instance_name" {
		comment  = "instance of the Memcached"
		optional = true
	}

	argument "keep_metrics" {
		optional = true
		default  = "(up|memcached_commands_total|memcached_connections_total|memcached_current_bytes|memcached_current_connections|memcached_current_items|memcached_items_evicted_total|memcached_items_total|memcached_max_connections|memcached_read_bytes_total|memcached_up|memcached_uptime_seconds|memcached_version|memcached_written_bytes_total)"
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
		default  = "60s"
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
		default  = "10s"
	}

	/***************************************************************
	* Integrations Memcached
	****************************************************************/
	// https://grafana.com/docs/alloy/latest/reference/components/prometheus.exporter.memcached/
	prometheus.exporter.memcached "integrations_memcached_exporter" {
		address = argument.memcached_address.value
		timeout = argument.memcached_timeout.value
	}

	/***************************************************************
	* Discovery Relabelings (pre-scrape)
	****************************************************************/
	discovery.relabel "integrations_memcached_exporter" {
		targets = prometheus.exporter.memcached.integrations_memcached_exporter.targets

		rule {
			target_label = "job"
			replacement  = argument.job_label.value
		}

		rule {
			target_label = "instance"
			replacement  = coalesce(argument.instance_name.value, constants.hostname)
		}
	}

	/***************************************************************
	* Prometheus Scrape Integrations Targets
	****************************************************************/
	prometheus.scrape "integrations_memcached_exporter" {
		targets = array.concat(
			discovery.relabel.integrations_memcached_exporter.output,
		)

		scrape_classic_histograms = true

		scrape_interval = argument.scrape_interval.value
		scrape_timeout  = argument.scrape_timeout.value

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_memcached_exporter.receiver]
	}

	/***************************************************************
	* Prometheus Metric Relabelings (post-scrape)
	****************************************************************/
	prometheus.relabel "integrations_memcached_exporter" {
		forward_to = argument.forward_to.value

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = argument.keep_metrics.value
			action        = "keep"
		}
	}
}
