/*
Module Components: servicemonitors_scrape
Description: Scrapes targets for metrics based on prometheus.operator.servicemonitors
*/

declare "servicemonitors_scrape" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment  = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
		optional = false
	}

	argument "cluster" { }

	argument "keep_metrics" {
		comment  = "A regex of metrics to keep (default: (.+))"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regex of metrics to drop (default: \"\")"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	/*****************************************************************
	* Kubernetes Auto Scrape ServiceMonitors
	*****************************************************************/
	prometheus.operator.servicemonitors "scrape" {
		forward_to = [prometheus.relabel.servicemonitors.receiver]

		scrape {
			default_scrape_interval = coalesce(argument.scrape_interval.value, "60s")
			default_scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")
		}

		clustering {
			enabled = true
		}
	}

	/*****************************************************************
	* Prometheus Metric Relabelings (post-scrape)
	*****************************************************************/
	// perform generic relabeling using keep_metrics and drop_metrics
	prometheus.relabel "servicemonitors" {
		forward_to = argument.forward_to.value

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = argument.cluster.value
			target_label = "cluster"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			action        = "keep"
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
		}

		// drop metrics that match the drop_metrics regex
		rule {
			action        = "drop"
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "")
		}
	}
}
