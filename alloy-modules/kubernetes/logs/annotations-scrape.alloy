/*
Module Components: annotations_scrape
Description: Scrapes targets for logs based on kubernetes Pod annotations

  Annotations:
    logs.grafana.com/ingest: true
    logs.grafana.com/tenant: "primary"
*/

declare "annotations_scrape" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
	}

	argument "tenant" {
		comment  = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
		optional = true
		default  = ".*"
	}

	// arguments for kubernetes discovery
	argument "namespaces" {
		comment  = "The namespaces to look for targets in (default: [\"kube-system\"] is all namespaces)"
		optional = true
	}

	argument "annotation_prefix" {
		comment  = "The annotation_prefix to use (default: logs.grafana.com)"
		default  = "logs.grafana.com"
		optional = true
	}

	argument "__sd_annotation" {
		optional = true
		comment  = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
		default  = replace(replace(replace(coalesce(argument.annotation_prefix.value, "logs.grafana.com"), ".", "_"), "/", "_"), "-", "_")
	}

	// find all pods
	discovery.kubernetes "annotation_logs" {
		role = "pod"

		namespaces {
			names = coalesce(argument.namespaces.value, [])
		}
	}

	// filter logs by kubernetes annotations
	discovery.relabel "annotation_logs_filter" {
		targets = discovery.kubernetes.annotation_logs.targets

		// allow pods to declare their logs to be ingested or not, the default is true
		//   i.e. logs.grafana.com/ingest: false
		rule {
			action        = "keep"
			source_labels = [
				"__meta_kubernetes_pod_annotation_" + argument.__sd_annotation.value + "_scrape",
			]
			regex = "^(true|)$"
		}

		// allow pods to declare what tenant their logs should be written to, the following annotation is supported:
		//   logs.grafana.com/tenant: "primary"
		rule {
			action        = "keep"
			source_labels = [
				"__meta_kubernetes_pod_annotation_" + argument.__sd_annotation.value + "_tenant",
			]
			regex = "^(" + argument.tenant.value + ")$"
		}

		// set the instance label as the name of the worker node the pod is on
		rule {
			action        = "replace"
			source_labels = ["__meta_kubernetes_pod_node_name"]
			target_label  = "instance"
		}

		// set the namespace label
		rule {
			source_labels = ["__meta_kubernetes_namespace"]
			target_label  = "namespace"
		}

		// set the pod label
		rule {
			source_labels = ["__meta_kubernetes_pod_name"]
			target_label  = "pod"
		}

		// set the container label
		rule {
			source_labels = ["__meta_kubernetes_pod_container_name"]
			target_label  = "container"
		}

		// set a workload label
		rule {
			source_labels = [
				"__meta_kubernetes_pod_controller_kind",
				"__meta_kubernetes_pod_controller_name",
			]
			separator    = "/"
			target_label = "workload"
		}
		// remove the hash from the ReplicaSet
		rule {
			source_labels = ["workload"]
			regex         = "(ReplicaSet/.+)-.+"
			target_label  = "workload"
		}

		// set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
		rule {
			action        = "replace"
			source_labels = [
				"__meta_kubernetes_pod_label_app_kubernetes_io_name",
				"__meta_kubernetes_pod_label_k8s_app",
				"__meta_kubernetes_pod_label_app",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		// set the component if specified as metadata labels "component:" or "app.kubernetes.io/component:" or "k8s-component:"
		rule {
			action        = "replace"
			source_labels = [
				"__meta_kubernetes_pod_label_app_kubernetes_io_component",
				"__meta_kubernetes_pod_label_k8s_component",
				"__meta_kubernetes_pod_label_component",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "component"
		}

		// set the version if specified as metadata labels "version:" or "app.kubernetes.io/version:" or "app_version:"
		rule {
			action        = "replace"
			source_labels = [
				"__meta_kubernetes_pod_label_app_kubernetes_io_version",
				"__meta_kubernetes_pod_label_version",
				"__meta_kubernetes_pod_label_app_version",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "version"
		}

		// set a source label
		rule {
			action       = "replace"
			replacement  = "kubernetes"
			target_label = "source"
		}

		// set the job label to be namespace / friendly pod name
		rule {
			action        = "replace"
			source_labels = [
				"workload",
				"__meta_kubernetes_namespace",
			]
			regex        = ".+\\/(.+);(.+)"
			replacement  = "$2/$1"
			target_label = "job"
		}

		// make all labels on the pod available to the pipeline as labels,
		// they are omitted before write via labelallow unless explicitly set
		rule {
			action = "labelmap"
			regex  = "__meta_kubernetes_pod_label_(.+)"
		}

		// make all annotations on the pod available to the pipeline as labels,
		// they are omitted before write via labelallow unless explicitly set
		rule {
			action = "labelmap"
			regex  = "__meta_kubernetes_pod_annotation_(.+)"
		}

		// as a result of kubernetes service discovery for pods, all of the meta data information is exposed in labels
		// __meta_kubernetes_pod_*, including __meta_kubernetes_pod_container_id which can be used to determine what
		// the pods container runtime is, docker (docker://...) or containerd (containerd://...) this will inform us
		// which parsing stage to use.  However, any labels that begin with __* are not passed to loki.process
		// (pipeline) stages. Use a relabeling stage to set a label that can be used a LogQL selector in the stage
		// below so parsing can be automatically determined, then drop the label from the loki.process stage.
		// set the container runtime as a label
		rule {
			action        = "replace"
			source_labels = ["__meta_kubernetes_pod_container_id"]
			regex         = "^(\\w+):\\/\\/.+$"
			replacement   = "$1"
			target_label  = "tmp_container_runtime"
		}
	}

	loki.source.kubernetes "lsd_kubernetes_logs" {
		targets    = discovery.relabel.annotation_logs_filter.output
		forward_to = [loki.process.parse.receiver]
	}

	// parse the log based on the container runtime
	loki.process "parse" {
		forward_to = argument.forward_to.value
		/*******************************************************************************
		*                         Container Runtime Parsing
		********************************************************************************/
		// if the label tmp_container_runtime from above is containerd parse using cri
		stage.match {
			selector = "{tmp_container_runtime=\"containerd\"}"
			// the cri processing stage extracts the following k/v pairs: log, stream, time, flags
			stage.cri { }

			// Set the extract flags and stream values as labels
			stage.labels {
				values = {
					flags  = "",
					stream = "",
				}
			}
		}

		// if the label tmp_container_runtime from above is docker parse using docker
		stage.match {
			selector = "{tmp_container_runtime=\"docker\"}"
			// the docker processing stage extracts the following k/v pairs: log, stream, time
			stage.docker { }

			// Set the extract stream value as a label
			stage.labels {
				values = {
					stream = "",
				}
			}
		}

		// drop the temporary container runtime label as it is no longer needed
		stage.label_drop {
			values = ["tmp_container_runtime"]
		}
	}
}
