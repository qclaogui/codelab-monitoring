/*
Module Components: component_redis_exporter
*/

declare "redis_exporter_metrics_scrape" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "job_label" {
		comment  = "job label (default: integrations/kubernetes/redis_exporter)"
		optional = true
	}

	argument "namespace" {
		comment  = "kubernetes secret name (default: monitoring-system)"
		optional = true
	}

	argument "name" {
		comment  = "kubernetes secret name (default: alloy-integrations-redis)"
		optional = true
	}

	argument "keep_metrics" {
		optional = true
		default  = "(up|redis_blocked_clients|redis_cluster_slots_fail|redis_cluster_slots_pfail|redis_cluster_state|redis_commands_duration_seconds_total|redis_commands_total|redis_connected_clients|redis_connected_slaves|redis_db_keys|redis_db_keys_expiring|redis_evicted_keys_total|redis_keyspace_hits_total|redis_keyspace_misses_total|redis_master_last_io_seconds_ago|redis_memory_fragmentation_ratio|redis_memory_max_bytes|redis_memory_used_bytes|redis_memory_used_rss_bytes|redis_total_system_memory_bytes|redis_up)"
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
		default  = "60s"
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
		default  = "10s"
	}

	remote.kubernetes.secret "redis" {
		namespace = coalesce(argument.namespace.value, "monitoring-system")
		name      = coalesce(argument.name.value, "alloy-integrations-redis")
	}

	/***************************************************************
	* Integrations Redis
	****************************************************************/
	prometheus.exporter.redis "integrations_redis_exporter" {
		redis_addr     = nonsensitive(remote.kubernetes.secret.redis.data["instance-address"])
		redis_password = nonsensitive(remote.kubernetes.secret.redis.data["instance-password"])
	}

	/***************************************************************
	* Discovery Relabelings (pre-scrape)
	****************************************************************/
	discovery.relabel "integrations_redis_exporter" {
		targets = prometheus.exporter.redis.integrations_redis_exporter.targets

		rule {
			target_label = "job"
			replacement  = coalesce(argument.job_label.value, "integrations/kubernetes/redis_exporter")
		}

		rule {
			target_label = "instance"
			replacement  = coalesce(nonsensitive(remote.kubernetes.secret.redis.data["instance-name"]), constants.hostname)
		}
	}

	/***************************************************************
	* Prometheus Scrape Integrations Targets
	****************************************************************/
	prometheus.scrape "integrations_redis_exporter" {
		targets = array.concat(
			discovery.relabel.integrations_redis_exporter.output,
		)

		scrape_classic_histograms = true

		scrape_interval = argument.scrape_interval.value
		scrape_timeout  = argument.scrape_timeout.value

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_redis_exporter.receiver]
	}

	/***************************************************************
	* Prometheus Metric Relabelings (post-scrape)
	****************************************************************/
	prometheus.relabel "integrations_redis_exporter" {
		forward_to = argument.forward_to.value

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = argument.keep_metrics.value
			action        = "keep"
		}
	}
}
