apiVersion: v1
kind: Namespace
metadata:
  name: gateway
---
apiVersion: v1
data:
  nginx.conf.template: |-
    worker_processes  auto;
    error_log  /dev/stderr error;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

      client_max_body_size  4M;

      proxy_read_timeout    600; ## 10 minutes
      proxy_send_timeout    600;
      proxy_connect_timeout 600;

      proxy_http_version    1.1;

      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

      map $status $loggable {
        ~^[23]  0;
        default 1;
      }

      access_log   /dev/stderr  main if=$loggable;

      sendfile     on;
      tcp_nopush   on;

      resolver kube-dns.kube-system.svc.cluster.local;

      # Ensure that X-Scope-OrgID is always present, default to the no_auth_tenant for backwards compatibility when multi-tenancy was turned off.
      map $http_x_scope_orgid $ensured_x_scope_orgid {
        default $http_x_scope_orgid;
        "" "anonymous";
      }

      include /etc/nginx/gateway_*.conf;
    }
kind: ConfigMap
metadata:
  name: nginx-conf-d76dbg78td
  namespace: gateway
---
apiVersion: v1
data:
  10-default-lgtmp.envsh: |-
    #!/usr/bin/env sh
    set -eu

    # As of version 1.19, the official Nginx Docker image supports templates with
    # variable substitution. But that uses `envsubst`, which does not allow for
    # defaults for missing variables. Here, first use the regular command shell
    # to set the defaults:

    # Default value is Mimir in monolithic mode
    export MIMIR_DISTRIBUTOR_HOST=${MIMIR_DISTRIBUTOR_HOST:-mimir.monitoring-system.svc.cluster.local}
    export MIMIR_QUERY_FRONTEND_HOST=${MIMIR_QUERY_FRONTEND_HOST:-mimir.monitoring-system.svc.cluster.local}
    export MIMIR_ALERT_MANAGER_HOST=${MIMIR_ALERT_MANAGER_HOST:-mimir.monitoring-system.svc.cluster.local}
    export MIMIR_RULER_HOST=${MIMIR_RULER_HOST:-mimir.monitoring-system.svc.cluster.local}
    export MIMIR_COMPACTOR_HOST=${MIMIR_COMPACTOR_HOST:-mimir.monitoring-system.svc.cluster.local}

    # Default value is Loki in monolithic mode
    export LOKI_DISTRIBUTOR_HOST=${LOKI_DISTRIBUTOR_HOST:-loki.logging-system.svc.cluster.local}
    export LOKI_INGESTER_HOST=${LOKI_INGESTER_HOST:-loki.logging-system.svc.cluster.local}
    export LOKI_RULER_HOST=${LOKI_RULER_HOST:-loki.logging-system.svc.cluster.local}
    export LOKI_COMPACTOR_HOST=${LOKI_COMPACTOR_HOST:-loki.logging-system.svc.cluster.local}
    export LOKI_QUERIER_HOST=${LOKI_QUERIER_HOST:-loki.logging-system.svc.cluster.local}
    export LOKI_QUERY_FRONTEND_HOST=${LOKI_QUERY_FRONTEND_HOST:-loki.logging-system.svc.cluster.local}

    # Default value is pyroscope in monolithic mode
    export PYROSCOPE_DISTRIBUTOR_HOST=${PYROSCOPE_DISTRIBUTOR_HOST:-pyroscope.profiles-system.svc.cluster.local}
    export PYROSCOPE_QUERY_FRONTEND_HOST=${PYROSCOPE_QUERY_FRONTEND_HOST:-pyroscope.profiles-system.svc.cluster.local}

    # Default value is tempo in monolithic mode
    export TEMPO_DISTRIBUTOR_HOST=${TEMPO_DISTRIBUTOR_HOST:-tempo.tracing-system.svc.cluster.local}
    export TEMPO_INGESTER_HOST=${TEMPO_INGESTER_HOST:-tempo.tracing-system.svc.cluster.local}
    export TEMPO_QUERY_FRONTEND_HOST=${TEMPO_QUERY_FRONTEND_HOST:-tempo.tracing-system.svc.cluster.local}
    export TEMPO_COMPACTOR_HOST=${TEMPO_COMPACTOR_HOST:-tempo.tracing-system.svc.cluster.local}

    export NGINX_ENVSUBST_OUTPUT_DIR=${NGINX_ENVSUBST_OUTPUT_DIR:-/etc/nginx}

    env
  10-listen-on-ipv6-by-default.sh: |
    #!/bin/sh
    # vim:sw=4:ts=4:et

    set -e

    entrypoint_log() {
        if [ -z "${NGINX_ENTRYPOINT_QUIET_LOGS:-}" ]; then
            echo "$@"
        fi
    }

    ME=$(basename "$0")
    DEFAULT_CONF_FILE="etc/nginx/conf.d/default.conf"

    # check if we have ipv6 available
    if [ ! -f "/proc/net/if_inet6" ]; then
        entrypoint_log "$ME: info: ipv6 not available"
        exit 0
    fi

    if [ ! -f "/$DEFAULT_CONF_FILE" ]; then
        entrypoint_log "$ME: info: /$DEFAULT_CONF_FILE is not a file or does not exist"
        exit 0
    fi

    # check if the file can be modified, e.g. not on a r/o filesystem
    touch /$DEFAULT_CONF_FILE 2>/dev/null || { entrypoint_log "$ME: info: can not modify /$DEFAULT_CONF_FILE (read-only file system?)"; exit 0; }

    # check if the file is already modified, e.g. on a container restart
    grep -q "listen  \[::]\:80;" /$DEFAULT_CONF_FILE && { entrypoint_log "$ME: info: IPv6 listen already enabled"; exit 0; }

    if [ -f "/etc/os-release" ]; then
        . /etc/os-release
    else
        entrypoint_log "$ME: info: can not guess the operating system"
        exit 0
    fi

    entrypoint_log "$ME: info: Getting the checksum of /$DEFAULT_CONF_FILE"

    case "$ID" in
        "debian")
            CHECKSUM=$(dpkg-query --show --showformat='${Conffiles}\n' nginx | grep $DEFAULT_CONF_FILE | cut -d' ' -f 3)
            echo "$CHECKSUM  /$DEFAULT_CONF_FILE" | md5sum -c - >/dev/null 2>&1 || {
                entrypoint_log "$ME: info: /$DEFAULT_CONF_FILE differs from the packaged version"
                exit 0
            }
            ;;
        "alpine")
            CHECKSUM=$(apk manifest nginx 2>/dev/null| grep $DEFAULT_CONF_FILE | cut -d' ' -f 1 | cut -d ':' -f 2)
            echo "$CHECKSUM  /$DEFAULT_CONF_FILE" | sha1sum -c - >/dev/null 2>&1 || {
                entrypoint_log "$ME: info: /$DEFAULT_CONF_FILE differs from the packaged version"
                exit 0
            }
            ;;
        *)
            entrypoint_log "$ME: info: Unsupported distribution"
            exit 0
            ;;
    esac

    # enable ipv6 on default.conf listen sockets
    sed -i -E 's,listen       80;,listen       80;\n    listen  [::]:80;,' /$DEFAULT_CONF_FILE

    entrypoint_log "$ME: info: Enabled listen on IPv6 in /$DEFAULT_CONF_FILE"

    exit 0
  15-local-resolvers.envsh: |
    #!/bin/sh
    # vim:sw=2:ts=2:sts=2:et

    set -eu

    LC_ALL=C
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    [ "${NGINX_ENTRYPOINT_LOCAL_RESOLVERS:-}" ] || return 0

    NGINX_LOCAL_RESOLVERS=$(awk 'BEGIN{ORS=" "} $1=="nameserver" {if ($2 ~ ":") {print "["$2"]"} else {print $2}}' /etc/resolv.conf)
    export NGINX_LOCAL_RESOLVERS
  20-envsubst-on-templates.sh: |
    #!/bin/sh

    set -e

    ME=$(basename "$0")

    entrypoint_log() {
        if [ -z "${NGINX_ENTRYPOINT_QUIET_LOGS:-}" ]; then
            echo "$@"
        fi
    }

    add_stream_block() {
      local conffile="/etc/nginx/nginx.conf"

      if grep -q -E "\s*stream\s*\{" "$conffile"; then
        entrypoint_log "$ME: $conffile contains a stream block; include $stream_output_dir/*.conf to enable stream templates"
      else
        # check if the file can be modified, e.g. not on a r/o filesystem
        touch "$conffile" 2>/dev/null || { entrypoint_log "$ME: info: can not modify $conffile (read-only file system?)"; exit 0; }
        entrypoint_log "$ME: Appending stream block to $conffile to include $stream_output_dir/*.conf"
        cat << END >> "$conffile"
    # added by "$ME" on "$(date)"
    stream {
      include $stream_output_dir/*.conf;
    }
    END
      fi
    }

    auto_envsubst() {
      local template_dir="${NGINX_ENVSUBST_TEMPLATE_DIR:-/etc/nginx/templates}"
      local suffix="${NGINX_ENVSUBST_TEMPLATE_SUFFIX:-.template}"
      local output_dir="${NGINX_ENVSUBST_OUTPUT_DIR:-/etc/nginx/conf.d}"
      local stream_suffix="${NGINX_ENVSUBST_STREAM_TEMPLATE_SUFFIX:-.stream-template}"
      local stream_output_dir="${NGINX_ENVSUBST_STREAM_OUTPUT_DIR:-/etc/nginx/stream-conf.d}"
      local filter="${NGINX_ENVSUBST_FILTER:-}"

      local template defined_envs relative_path output_path subdir
      defined_envs=$(printf '${%s} ' $(awk "END { for (name in ENVIRON) { print ( name ~ /${filter}/ ) ? name : \"\" } }" < /dev/null ))
      [ -d "$template_dir" ] || return 0
      if [ ! -w "$output_dir" ]; then
        entrypoint_log "$ME: ERROR: $template_dir exists, but $output_dir is not writable"
        return 0
      fi
      find "$template_dir" -follow -type f -name "*$suffix" -print | while read -r template; do
        relative_path="${template#"$template_dir/"}"
        output_path="$output_dir/${relative_path%"$suffix"}"
        subdir=$(dirname "$relative_path")
        # create a subdirectory where the template file exists
        mkdir -p "$output_dir/$subdir"
        entrypoint_log "$ME: Running envsubst on $template to $output_path"
        envsubst "$defined_envs" < "$template" > "$output_path"
      done

      # Print the first file with the stream suffix, this will be false if there are none
      if test -n "$(find "$template_dir" -name "*$stream_suffix" -print -quit)"; then
        mkdir -p "$stream_output_dir"
        if [ ! -w "$stream_output_dir" ]; then
          entrypoint_log "$ME: ERROR: $template_dir exists, but $stream_output_dir is not writable"
          return 0
        fi
        add_stream_block
        find "$template_dir" -follow -type f -name "*$stream_suffix" -print | while read -r template; do
          relative_path="${template#"$template_dir/"}"
          output_path="$stream_output_dir/${relative_path%"$stream_suffix"}"
          subdir=$(dirname "$relative_path")
          # create a subdirectory where the template file exists
          mkdir -p "$stream_output_dir/$subdir"
          entrypoint_log "$ME: Running envsubst on $template to $output_path"
          envsubst "$defined_envs" < "$template" > "$output_path"
        done
      fi
    }

    auto_envsubst

    exit 0
  30-tune-worker-processes.sh: |
    #!/bin/sh
    # vim:sw=2:ts=2:sts=2:et

    set -eu

    LC_ALL=C
    ME=$(basename "$0")
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    [ "${NGINX_ENTRYPOINT_WORKER_PROCESSES_AUTOTUNE:-}" ] || exit 0

    touch /etc/nginx/nginx.conf 2>/dev/null || { echo >&2 "$ME: error: can not modify /etc/nginx/nginx.conf (read-only file system?)"; exit 0; }

    ceildiv() {
      num=$1
      div=$2
      echo $(( (num + div - 1) / div ))
    }

    get_cpuset() {
      cpusetroot=$1
      cpusetfile=$2
      ncpu=0
      [ -f "$cpusetroot/$cpusetfile" ] || return 1
      for token in $( tr ',' ' ' < "$cpusetroot/$cpusetfile" ); do
        case "$token" in
          *-*)
            count=$( seq $(echo "$token" | tr '-' ' ') | wc -l )
            ncpu=$(( ncpu+count ))
            ;;
          *)
            ncpu=$(( ncpu+1 ))
            ;;
        esac
      done
      echo "$ncpu"
    }

    get_quota() {
      cpuroot=$1
      ncpu=0
      [ -f "$cpuroot/cpu.cfs_quota_us" ] || return 1
      [ -f "$cpuroot/cpu.cfs_period_us" ] || return 1
      cfs_quota=$( cat "$cpuroot/cpu.cfs_quota_us" )
      cfs_period=$( cat "$cpuroot/cpu.cfs_period_us" )
      [ "$cfs_quota" = "-1" ] && return 1
      [ "$cfs_period" = "0" ] && return 1
      ncpu=$( ceildiv "$cfs_quota" "$cfs_period" )
      [ "$ncpu" -gt 0 ] || return 1
      echo "$ncpu"
    }

    get_quota_v2() {
      cpuroot=$1
      ncpu=0
      [ -f "$cpuroot/cpu.max" ] || return 1
      cfs_quota=$( cut -d' ' -f 1 < "$cpuroot/cpu.max" )
      cfs_period=$( cut -d' ' -f 2 < "$cpuroot/cpu.max" )
      [ "$cfs_quota" = "max" ] && return 1
      [ "$cfs_period" = "0" ] && return 1
      ncpu=$( ceildiv "$cfs_quota" "$cfs_period" )
      [ "$ncpu" -gt 0 ] || return 1
      echo "$ncpu"
    }

    get_cgroup_v1_path() {
      needle=$1
      found=
      foundroot=
      mountpoint=

      [ -r "/proc/self/mountinfo" ] || return 1
      [ -r "/proc/self/cgroup" ] || return 1

      while IFS= read -r line; do
        case "$needle" in
          "cpuset")
            case "$line" in
              *cpuset*)
                found=$( echo "$line" | cut -d ' ' -f 4,5 )
                break
                ;;
            esac
            ;;
          "cpu")
            case "$line" in
              *cpuset*)
                ;;
              *cpu,cpuacct*|*cpuacct,cpu|*cpuacct*|*cpu*)
                found=$( echo "$line" | cut -d ' ' -f 4,5 )
                break
                ;;
            esac
        esac
      done << __EOF__
    $( grep -F -- '- cgroup ' /proc/self/mountinfo )
    __EOF__

      while IFS= read -r line; do
        controller=$( echo "$line" | cut -d: -f 2 )
        case "$needle" in
          "cpuset")
            case "$controller" in
              cpuset)
                mountpoint=$( echo "$line" | cut -d: -f 3 )
                break
                ;;
            esac
            ;;
          "cpu")
            case "$controller" in
              cpu,cpuacct|cpuacct,cpu|cpuacct|cpu)
                mountpoint=$( echo "$line" | cut -d: -f 3 )
                break
                ;;
            esac
            ;;
        esac
    done << __EOF__
    $( grep -F -- 'cpu' /proc/self/cgroup )
    __EOF__

      case "${found%% *}" in
        "/")
          foundroot="${found##* }$mountpoint"
          ;;
        "$mountpoint")
          foundroot="${found##* }"
          ;;
      esac
      echo "$foundroot"
    }

    get_cgroup_v2_path() {
      found=
      foundroot=
      mountpoint=

      [ -r "/proc/self/mountinfo" ] || return 1
      [ -r "/proc/self/cgroup" ] || return 1

      while IFS= read -r line; do
        found=$( echo "$line" | cut -d ' ' -f 4,5 )
      done << __EOF__
    $( grep -F -- '- cgroup2 ' /proc/self/mountinfo )
    __EOF__

      while IFS= read -r line; do
        mountpoint=$( echo "$line" | cut -d: -f 3 )
    done << __EOF__
    $( grep -F -- '0::' /proc/self/cgroup )
    __EOF__

      case "${found%% *}" in
        "")
          return 1
          ;;
        "/")
          foundroot="${found##* }$mountpoint"
          ;;
        "$mountpoint" | /../*)
          foundroot="${found##* }"
          ;;
      esac
      echo "$foundroot"
    }

    ncpu_online=$( getconf _NPROCESSORS_ONLN )
    ncpu_cpuset=
    ncpu_quota=
    ncpu_cpuset_v2=
    ncpu_quota_v2=

    cpuset=$( get_cgroup_v1_path "cpuset" ) && ncpu_cpuset=$( get_cpuset "$cpuset" "cpuset.effective_cpus" ) || ncpu_cpuset=$ncpu_online
    cpu=$( get_cgroup_v1_path "cpu" ) && ncpu_quota=$( get_quota "$cpu" ) || ncpu_quota=$ncpu_online
    cgroup_v2=$( get_cgroup_v2_path ) && ncpu_cpuset_v2=$( get_cpuset "$cgroup_v2" "cpuset.cpus.effective" ) || ncpu_cpuset_v2=$ncpu_online
    cgroup_v2=$( get_cgroup_v2_path ) && ncpu_quota_v2=$( get_quota_v2 "$cgroup_v2" ) || ncpu_quota_v2=$ncpu_online

    ncpu=$( printf "%s\n%s\n%s\n%s\n%s\n" \
                   "$ncpu_online" \
                   "$ncpu_cpuset" \
                   "$ncpu_quota" \
                   "$ncpu_cpuset_v2" \
                   "$ncpu_quota_v2" \
                   | sort -n \
                   | head -n 1 )

    sed -i.bak -r 's/^(worker_processes)(.*)$/# Commented out by '"$ME"' on '"$(date)"'\n#\1\2\n\1 '"$ncpu"';/' /etc/nginx/nginx.conf
kind: ConfigMap
metadata:
  name: nginx-entrypoint-scripts-kkf5b925m6
  namespace: gateway
---
apiVersion: v1
data:
  gateway_loki.conf.template: |-
    server {
        listen 3100;
        listen [::]:3100;

        location = / {
          return 200 'OK';
          auth_basic off;
          access_log off;
        }

        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        # Distributor endpoints
        location = /api/prom/push {
          proxy_pass      http://${LOKI_DISTRIBUTOR_HOST}:3100$request_uri;
        }
        location = /loki/api/v1/push {
          proxy_pass      http://${LOKI_DISTRIBUTOR_HOST}:3100$request_uri;
        }
        location = /distributor/ring {
          proxy_pass      http://${LOKI_DISTRIBUTOR_HOST}:3100$request_uri;
        }
        location = /otlp/v1/logs {
          proxy_pass      http://${LOKI_DISTRIBUTOR_HOST}:3100$request_uri;
        }

        # Ingester endpoints
        location /flush {
          proxy_pass      http://${LOKI_INGESTER_HOST}:3100$request_uri;
        }
        location ^~ /ingester/ {
          proxy_pass      http://${LOKI_INGESTER_HOST}:3100$request_uri;
        }
        location = /ingester {
          internal;        # to suppress 301
        }

        # Ring
        location = /ring {
          proxy_pass http://${LOKI_INGESTER_HOST}:3100$request_uri;
        }

        # MemberListKV
        location = /memberlist {
          proxy_pass http://${LOKI_INGESTER_HOST}:3100$request_uri;
        }


        # Ruler endpoints
        location = /ruler/ring {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /api/prom/rules.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /api/prom/alerts.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /loki/api/v1/rules.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /loki/api/v1/alerts.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /prometheus/api/v1/alerts.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }
        location ~ /prometheus/api/v1/rules.* {
          proxy_pass      http://${LOKI_RULER_HOST}:3100$request_uri;
        }


        # Compactor endpoints
        location = /compactor/ring {
          proxy_pass      http://${LOKI_COMPACTOR_HOST}:3100$request_uri;
        }
        location = /loki/api/v1/delete {
          proxy_pass      http://${LOKI_COMPACTOR_HOST}:3100$request_uri;
        }
        location = /loki/api/v1/cache/generation_numbers {
          proxy_pass      http://${LOKI_COMPACTOR_HOST}:3100$request_uri;
        }

        # IndexGateway endpoints
        location = /indexgateway/ring {
          proxy_pass      http://${LOKI_COMPACTOR_HOST}:3100$request_uri;
        }

        # Config endpoints
        location = /config {
          proxy_pass      http://${LOKI_COMPACTOR_HOST}:3100$request_uri;
        }

        # QueryFrontend, Querier endpoints
        location = /api/prom/tail {
          proxy_pass      http://${LOKI_QUERY_FRONTEND_HOST}:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location = /loki/api/v1/tail {
          proxy_pass      http://${LOKI_QUERIER_HOST}:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location ~ /api/prom/.* {
          proxy_pass      http://${LOKI_QUERY_FRONTEND_HOST}:3100$request_uri;
        }
        location ~ /loki/api/v1.* {
          proxy_pass      http://${LOKI_QUERY_FRONTEND_HOST}:3100$request_uri;
        }
      }
  gateway_mimir.conf.template: "server {\n    listen 8080;\n    listen [::]:8080;\n\n
    \   location = / {\n      return 200 'OK';\n      auth_basic off;\n      access_log
    off;\n    }\n\n    proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;\n\n
    \   # Distributor endpoints\n    location /distributor {\n      proxy_pass      http://${MIMIR_DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n    location = /api/v1/push {\n      proxy_pass      http://${MIMIR_DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n    location /otlp/v1/metrics {\n      proxy_pass      http://${MIMIR_DISTRIBUTOR_HOST}:8080$request_uri;\n
    \   }\n\n    # Alertmanager endpoints\n    location /alertmanager {\n      proxy_pass
    \     http://${MIMIR_ALERT_MANAGER_HOST}:8080$request_uri;\n    }\n    location
    = /multitenant_alertmanager/status {\n      proxy_pass      http://${MIMIR_ALERT_MANAGER_HOST}:8080$request_uri;\n
    \   }\n    # https://github.com/grafana/mimir/releases/tag/mimir-2.12.0\n    #
    Alertmanager deprecated the v1 API. All endpoints have a v2 equivalent.\n    location
    = /api/v2/alerts {\n      proxy_pass      http://${MIMIR_ALERT_MANAGER_HOST}:8080$request_uri;\n
    \   }\n\n    # Ruler endpoints\n    location /prometheus/config/v1/rules {\n      proxy_pass
    \     http://${MIMIR_RULER_HOST}:8080$request_uri;\n    }\n    location /prometheus/api/v1/rules
    {\n      proxy_pass      http://${MIMIR_RULER_HOST}:8080$request_uri;\n    }\n
    \   \n    location /prometheus/api/v1/alerts {\n      proxy_pass      http://${MIMIR_RULER_HOST}:8080$request_uri;\n
    \   }\n    location = /ruler/ring {\n      proxy_pass      http://${MIMIR_RULER_HOST}:8080$request_uri;\n
    \   }\n\n    # Rest of /prometheus goes to the query frontend\n    location /prometheus
    {\n      proxy_pass      http://${MIMIR_QUERY_FRONTEND_HOST}:8080$request_uri;\n
    \   }\n\n    # Buildinfo endpoint can go to any component\n    location = /api/v1/status/buildinfo
    {\n      proxy_pass      http://${MIMIR_QUERY_FRONTEND_HOST}:8080$request_uri;\n
    \   }\n\n    # Compactor endpoint for uploading blocks\n    location /api/v1/upload/block/
    {\n      proxy_pass      http://${MIMIR_COMPACTOR_HOST}:8080$request_uri;\n    }\n}"
  gateway_pyroscope.conf.template: |-
    server {
        listen 4040;
        listen [::]:4040;

        location = / {
          return 200 'OK';
          auth_basic off;
          access_log off;
        }

        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

        # Distributor endpoints
        location /push.v1.PusherService {
          proxy_pass      http://${PYROSCOPE_DISTRIBUTOR_HOST}:4040$request_uri;
        }

        location /querier.v1.QuerierService {
          proxy_pass      http://${PYROSCOPE_QUERY_FRONTEND_HOST}:4040$request_uri;
        }
    }
kind: ConfigMap
metadata:
  name: nginx-templates
  namespace: gateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: gateway
spec:
  ports:
  - name: http-mimir
    port: 8080
  - name: http-loki
    port: 3100
  - name: http-pyroscope
    port: 4040
  - name: http-tempo
    port: 3200
  - name: grpc-otlp-tempo
    port: 4317
  - name: http-otlp-tempo
    port: 4318
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: nginx-env
            optional: true
        image: nginxinc/nginx-unprivileged:1.25-alpine
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 8080
          name: http-mimir
        - containerPort: 3100
          name: http-loki
        - containerPort: 4040
          name: http-pyroscope
        - containerPort: 3200
          name: http-tempo
        - containerPort: 4317
          name: grpc-otlp-tempo
        - containerPort: 4318
          name: http-otlp-tempo
        resources:
          limits:
            cpu: 999m
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 10Mi
        volumeMounts:
        - mountPath: /etc/nginx/templates
          name: templates
        - mountPath: /docker-entrypoint.d
          name: entrypoint-scripts
      initContainers:
      - command:
        - sh
        - -c
        - cp /configmap/* /docker-entrypoint.d/
        image: registry.k8s.io/busybox
        name: fix-perms
        volumeMounts:
        - mountPath: /configmap
          name: configmap-scripts
        - mountPath: /docker-entrypoint.d
          name: entrypoint-scripts
      terminationGracePeriodSeconds: 30
      volumes:
      - name: templates
        projected:
          sources:
          - configMap:
              name: nginx-conf-d76dbg78td
          - configMap:
              name: nginx-templates
      - emptyDir: {}
        name: entrypoint-scripts
      - configMap:
          defaultMode: 511
          name: nginx-entrypoint-scripts-kkf5b925m6
        name: configmap-scripts
