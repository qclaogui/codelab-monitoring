/*
Module Components: kubelet
Description: kubernetes kubelet Metrics Scrape

*/

declare "kubelet_metrics_scrape" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricsReceiver) where collected metrics should be forwarded to"
	}

	argument "cluster" { }

	argument "keep_metrics" {
		comment  = "A regex of metrics to keep (default: see below)"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regular expression of metrics to drop (default: see below)"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	argument "max_cache_size" {
		comment  = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
		optional = true
	}

	/*****************************************************************
	* Targets From Docker Discovery
	*****************************************************************/
	discovery.kubernetes "node" {
		role = "node"
	}

	/*****************************************************************
	* Discovery Relabelings (pre-scrape)
	*****************************************************************/
	discovery.relabel "node" {
		targets = discovery.kubernetes.node.targets

		// set the address to use the kubernetes service dns name
		rule {
			target_label = "__address__"
			replacement  = "kubernetes.default.svc.cluster.local:443"
		}

		// set the node label
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			target_label  = "node"
		}

		// set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
		rule {
			action        = "replace"
			source_labels = [
				"__meta_kubernetes_service_label_app_kubernetes_io_name",
				"__meta_kubernetes_service_label_k8s_app",
				"__meta_kubernetes_service_label_app",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = argument.cluster.value
			target_label = "cluster"
		}

		// set a source label
		rule {
			action       = "replace"
			replacement  = "kubernetes"
			target_label = "source"
		}
	}

	discovery.relabel "kubelet" {
		targets = discovery.relabel.node.output

		rule {
			target_label = "job"
			replacement  = "integrations/kubernetes/kubelet"
		}

		// set the metrics path to use the proxy path to the nodes kubelet metrics endpoint
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			regex         = "(.+)"
			replacement   = "/api/v1/nodes/${1}/proxy/metrics"
			target_label  = "__metrics_path__"
		}
	}

	discovery.relabel "resources" {
		targets = discovery.relabel.node.output

		rule {
			target_label = "job"
			replacement  = "integrations/kubernetes/kube-resources"
		}

		// set the metrics path to use the proxy path to the nodes kubelet metrics endpoint
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			regex         = "(.+)"
			replacement   = "/api/v1/nodes/${1}/proxy/metrics/resource"
			target_label  = "__metrics_path__"
		}
	}

	discovery.relabel "probes" {
		targets = discovery.relabel.node.output

		rule {
			target_label = "job"
			replacement  = "integrations/kubernetes/kube-probes"
		}

		// set the metrics path to use the proxy path to the nodes kubelet metrics endpoint
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			regex         = "(.+)"
			replacement   = "/api/v1/nodes/${1}/proxy/metrics/probes"
			target_label  = "__metrics_path__"
		}
	}

	discovery.relabel "cadvisor" {
		targets = discovery.relabel.node.output

		rule {
			target_label = "job"
			replacement  = "integrations/kubernetes/cadvisor"
		}

		// set the metrics path to use the proxy path to the nodes kubelet metrics endpoint
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			regex         = "(.+)"
			replacement   = "/api/v1/nodes/${1}/proxy/metrics/cadvisor"
			target_label  = "__metrics_path__"
		}
	}

	/*****************************************************************
	* Prometheus Scrape Labels Targets
	*****************************************************************/
	prometheus.scrape "kubelet" {
		targets = concat(
			discovery.relabel.kubelet.output,
			discovery.relabel.resources.output,
			discovery.relabel.probes.output,
			discovery.relabel.cadvisor.output,
		)

		scheme            = "https"
		scrape_interval   = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout    = coalesce(argument.scrape_timeout.value, "10s")
		bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

		tls_config {
			ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
			insecure_skip_verify = false
			server_name          = "kubernetes"
		}

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.kubelet.receiver]
	}

	/********************************************
	* Prometheus Metric Relabelings (post-scrape)
	********************************************/
	prometheus.relabel "kubelet" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}
		// Drop empty container labels, addressing https://github.com/google/cadvisor/issues/2688
		rule {
			source_labels = ["__name__", "container"]
			separator     = "@"
			regex         = "(container_cpu_.*|container_fs_.*|container_memory_.*)@"
			action        = "drop"
		}

		// Drop empty image labels, addressing https://github.com/google/cadvisor/issues/2688
		rule {
			source_labels = ["__name__", "image"]
			separator     = "@"
			regex         = "(container_cpu_.*|container_fs_.*|container_memory_.*|container_network_.*)@"
			action        = "drop"
		}

		// Normalizing unimportant labels (not deleting to continue satisfying <label>!="" checks)
		rule {
			source_labels = ["__name__", "boot_id"]
			separator     = "@"
			regex         = "machine_memory_bytes@.*"
			target_label  = "boot_id"
			replacement   = "NA"
		}

		rule {
			source_labels = ["__name__", "system_uuid"]
			separator     = "@"
			regex         = "machine_memory_bytes@.*"
			target_label  = "system_uuid"
			replacement   = "NA"
		}

		// Filter out non-physical devices/interfaces
		rule {
			source_labels = ["__name__", "device"]
			separator     = "@"
			regex         = "container_fs_.*@(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dasd.+)"
			target_label  = "__keepme"
			replacement   = "1"
		}

		rule {
			source_labels = ["__name__", "__keepme"]
			separator     = "@"
			regex         = "container_fs_.*@"
			action        = "drop"
		}

		rule {
			source_labels = ["__name__"]
			regex         = "container_fs_.*"
			target_label  = "__keepme"
			replacement   = ""
		}

		rule {
			source_labels = ["__name__", "interface"]
			separator     = "@"
			regex         = "container_network_.*@(en[ospx][0-9].*|wlan[0-9].*|eth[0-9].*)"
			target_label  = "__keepme"
			replacement   = "1"
		}

		rule {
			source_labels = ["__name__", "__keepme"]
			separator     = "@"
			regex         = "container_network_.*@"
			action        = "drop"
		}

		rule {
			source_labels = ["__name__"]
			regex         = "container_network_.*"
			target_label  = "__keepme"
			replacement   = ""
		}
	}
}
