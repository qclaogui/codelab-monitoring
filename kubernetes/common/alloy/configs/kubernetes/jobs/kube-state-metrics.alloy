/*
Module Components: kube_state_metrics
Description: kubernetes kube_state_metrics Metrics Scrape

*/

declare "kube_state_metrics_scrape" {

	/********************************************
	* ARGUMENTS
	********************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricsReceiver) where collected metrics should be forwarded to"
	}

	argument "cluster" { }

	argument "namespaces" {
		comment  = "The namespaces to look for targets in (default: [] is all namespaces)"
		optional = true
	}

	argument "field_selectors" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		comment  = "The label selectors to use to find matching targets (default: [])"
		optional = true
	}

	argument "label_selectors" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		comment  = "The label selectors to use to find matching targets (default: [\"app.kubernetes.io/name=kube-state-metrics\"])"
		optional = true
	}

	argument "port_name" {
		comment  = "The of the port to scrape metrics from (default: http)"
		optional = true
	}

	argument "job_label" {
		comment  = "The job label to add for all kube_state_metrics metrics (default: integrations/kubernetes/kube-state-metrics)"
		optional = true
	}

	argument "keep_metrics" {
		comment  = "A regex of metrics to keep (default: see below)"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regular expression of metrics to drop (default: see below)"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	argument "max_cache_size" {
		comment  = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
		optional = true
	}

	/*****************************************************************
	* Targets From Service Discovery
	*****************************************************************/
	discovery.kubernetes "kube_state_metrics" {
		role = "service"

		selectors {
			role  = "service"
			field = string.join(coalesce(argument.field_selectors.value, []), ",")
			label = string.join(coalesce(argument.label_selectors.value, ["app.kubernetes.io/name=kube-state-metrics"]), ",")
		}

		namespaces {
			names = coalesce(argument.namespaces.value, [])
		}
	}

	/*****************************************************************
	* Discovery Relabelings (pre-scrape)
	*****************************************************************/
	discovery.relabel "kube_state_metrics" {
		targets = discovery.kubernetes.kube_state_metrics.targets

		// only keep targets with a matching port name
		rule {
			source_labels = ["__meta_kubernetes_service_port_name"]
			regex         = coalesce(argument.port_name.value, "http")
			action        = "keep"
		}

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = argument.cluster.value
			target_label = "cluster"
		}

		// set a source label
		rule {
			action       = "replace"
			replacement  = "kubernetes"
			target_label = "source"
		}
	}

	/*****************************************************************
	* Prometheus Scrape Labels Targets
	*****************************************************************/
	prometheus.scrape "kube_state_metrics" {
		targets = discovery.relabel.kube_state_metrics.output

		job_name        = coalesce(argument.job_label.value, "integrations/kubernetes/kube-state-metrics")
		scrape_interval = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.kube_state_metrics.receiver]
	}

	/********************************************
	* Prometheus Metric Relabelings (post-scrape)
	********************************************/
	prometheus.relabel "kube_state_metrics" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(up|kube_(daemonset.*|deployment_(metadata_generation|spec_replicas|status_(observed_generation|replicas_(available|updated)))|horizontalpodautoscaler_(spec_(max|min)_replicas|status_(current|desired)_replicas)|job.*|namespace_status_phase|node.*|persistentvolumeclaim_resource_requests_storage_bytes|pod_(container_(info|resource_(limits|requests)|status_(last_terminated_reason|restarts_total|waiting_reason))|info|owner|start_time|status_(phase|reason))|replicaset.*|resourcequota|statefulset.*))")
			action        = "keep"
		}
	}
}
