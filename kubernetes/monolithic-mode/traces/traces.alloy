logging {
	level  = coalesce(sys.env("ALLOY_LOG_LEVEL"), "warn")
	format = "logfmt"
}

/********************************************
 * Grafana LGTMP Stack Receiver Provider
 ********************************************/
// import.git "provider" {
// 	repository     = "https://github.com/qclaogui/codelab-monitoring.git"
// 	revision       = "main"
// 	path           = "alloy-modules/provider"
// 	// pull_frequency set to "0s": the Git repository is pulled only once during initialization.
// 	pull_frequency = "0s"
// }

// local file
import.file "provider" {
	filename = coalesce(sys.env("ALLOY_MODULES_FOLDER"), "/etc/alloy/modules") + "/provider"
}

provider.self_hosted_stack "kubernetes" {
	metrics_endpoint_url = coalesce(sys.env("SELF_HOSTED_METRICS_ENDPOINT_URL"), "http://nginx.gateway.svc:8080/api/v1/push")
	logs_endpoint_url    = coalesce(sys.env("SELF_HOSTED_LOGS_ENDPOINT_URL"), "http://nginx.gateway.svc:3100/loki/api/v1/push")
	traces_endpoint_url  = coalesce(sys.env("SELF_HOSTED_TRACES_ENDPOINT_URL"), "http://nginx.gateway.svc:4318")
}

/********************************************
 * Beyla ebpf
 ********************************************/
// beyla.ebpf "default" {
// 	attributes {
// 		kubernetes {
// 			enable = "true"
// 		}
// 	}

// 	routes {
// 		patterns = [
// 			"/api/v1/push",
// 			"/prometheus",
// 			"/prometheus/api/v1/series",
// 			"/prometheus/api/v1/query_range",
// 			"/prometheus/api/v1/query_exemplars",
// 			"/loki/api/v1/push",
// 			"/loki/api/v1/query_range",
// 			"/loki/api/v1/labels",
// 			"/otlp/v1/traces",
// 			"/otlp/v1/metrics",
// 			"/api/traces/{trace_id}",
// 		]
// 		unmatched = "path"
// 	}

// 	discovery {
// 		services {
// 			namespace  = "gateway"
// 			// name       = "nginx"
// 			exe_path   = "nginx"
// 			open_ports = "8080,3100,3200,4318"
// 		}
// 	}

// 	output {
// 		traces = [otelcol.exporter.logging.traces.input, traces.process_and_transform.kubernetes.alloy_traces_input]
// 	}
// }

// otelcol.exporter.logging "traces" {
//     verbosity           = "detailed"
//     sampling_initial    = 1
//     sampling_thereafter = 1
// }

// prometheus.scrape "beyla" {
// 	targets    = beyla.ebpf.default.targets
// 	forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
// }

/********************************************
 * Traces
 ********************************************/
import.file "traces" {
	filename = coalesce(sys.env("ALLOY_MODULES_FOLDER"), "/etc/alloy/modules") + "/kubernetes/traces"
}

// traces Processing And Transformation process_and_transform
traces.process_and_transform "kubernetes" {
	cluster = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")

	metrics_forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
	logs_forward_to    = [provider.self_hosted_stack.kubernetes.logs_receiver]
	traces_forward_to  = [provider.self_hosted_stack.kubernetes.traces_receiver]
}

tracing {
	// Write all spans. Don't do this in production!
	sampling_fraction = 1

	// Forward Alloy internal spans to traces process.
	write_to = [traces.process_and_transform.kubernetes.alloy_traces_input]
}

/********************************************
 * Logs
 ********************************************/
import.file "logs" {
	filename = coalesce(sys.env("ALLOY_MODULES_FOLDER"), "/etc/alloy/modules") + "/kubernetes/logs"
}

logs.rules_to_loki "kubernetes" { }

logs.kubernetes_cluster_events "kubernetes" {
	cluster = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")

	forward_to = [logs.keep_labels.kubernetes.receiver]
}

logs.annotations_scrape "kubernetes" {
	cluster    = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")
	forward_to = [logs.keep_labels.kubernetes.receiver]
}

logs.keep_labels "kubernetes" {
	forward_to = [provider.self_hosted_stack.kubernetes.logs_receiver]
}

/********************************************
 * Metrics
 ********************************************/
import.file "metrics" {
	filename = coalesce(sys.env("ALLOY_MODULES_FOLDER"), "/etc/alloy/modules") + "/kubernetes/metrics"
}

metrics.annotations_scrape "kubernetes" {
	cluster         = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")
	scrape_interval = "15s"

	forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
}

metrics.servicemonitors_scrape "kubernetes" {
	cluster         = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")
	scrape_interval = "15s"

	forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
}

// Jobs metrics
import.file "jobs" {
	filename = coalesce(sys.env("ALLOY_MODULES_FOLDER"), "/etc/alloy/modules") + "/kubernetes/jobs"
}

jobs.kubelet_metrics_scrape "kubernetes" {
	cluster         = coalesce(sys.env("CLUSTER_NAME"), "k3d-k3s-codelab")
	scrape_interval = "30s"

	forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
}

// Alloy integration metrics
remote.kubernetes.configmap "integrations" {
	namespace = "monitoring-system"
	name      = "alloy-integrations"
}

// Memcached Integrations
import.string "memcached" {
	content = remote.kubernetes.configmap.integrations.data["memcached.alloy"]
}

memcached.memcached_metrics_scrape "instance" {
	namespace = "monitoring-system"
	name      = remote.kubernetes.configmap.integrations.data["MEMCACHED_K8S_SECRET_NAME"]

	forward_to = [provider.self_hosted_stack.kubernetes.metrics_receiver]
}
